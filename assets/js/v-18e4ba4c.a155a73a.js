"use strict";(self.webpackChunkaurora_template=self.webpackChunkaurora_template||[]).push([[428],{2237:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-18e4ba4c",path:"/Javascript/Node.js%E4%B8%A4%E7%A7%8D%E8%B0%83%E7%94%A8Mongodb%E6%96%B9%E6%B3%95.html",title:"Node.js两种调用Mongodb方法",lang:"zh-CN",frontmatter:{date:"2022/4/9 20:08",coverUrl:"/pic/8.jpg",stick:!1,keyword:"Node.js,Mongodb,方法",description:"Node.js两种调用Mongodb方法",title:"Node.js两种调用Mongodb方法",tag:["Node.js","Mongodb","方法"],categories:["Node.js","Mondodb","方法"]},excerpt:"",headers:[{level:2,title:"✨Node.js两种调用Mongodb方法✨",slug:"✨node-js两种调用mongodb方法✨",children:[{level:3,title:"方法一：MongoClient",slug:"方法一-mongoclient",children:[]},{level:3,title:"方法二：Mongoose",slug:"方法二-mongoose",children:[]},{level:3,title:"new Object",slug:"new-object",children:[]},{level:3,title:"使用案例",slug:"使用案例",children:[]}]}],git:{updatedTime:null,contributors:[]}}},8914:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var e=a(6252);const o=(0,e.uE)('<h2 id="✨node-js两种调用mongodb方法✨" tabindex="-1"><a class="header-anchor" href="#✨node-js两种调用mongodb方法✨" aria-hidden="true">#</a> ✨Node.js两种调用Mongodb方法✨</h2><h3 id="方法一-mongoclient" tabindex="-1"><a class="header-anchor" href="#方法一-mongoclient" aria-hidden="true">#</a> 方法一：MongoClient</h3><h4 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h4><ul><li>MongoClient是Mongodb官方提供的Node.js驱动，继承于mongo类（现在mongo模块被淘汰了），对MongoDB的操作和在mongo shell中几乎一致</li><li>虽然已经不是Node.js操作 MongoDB的首选库了，但还是很值得学习的。目前Node.js操作 MongoDB的首选库是Mongoose</li></ul><h4 id="创建链接" tabindex="-1"><a class="header-anchor" href="#创建链接" aria-hidden="true">#</a> 创建链接：</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> MongoClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>\n<span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&quot;mongodb://localhost:27017/runoob&quot;</span><span class="token punctuation">;</span><span class="token comment">//mongodb默认地址</span>\n \nMongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> db</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;数据库已创建!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  db<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="方法二-mongoose" tabindex="-1"><a class="header-anchor" href="#方法二-mongoose" aria-hidden="true">#</a> 方法二：Mongoose</h3><h4 id="介绍-1" tabindex="-1"><a class="header-anchor" href="#介绍-1" aria-hidden="true">#</a> 介绍</h4>',8),p=(0,e._)("ul",null,[(0,e._)("li",null,"Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB的nodejs驱动，也目前是Node.js操作 MongoDB的首选库。"),(0,e._)("li",null,"Mongoose 是一个让我们可以通过Node来操作MongoDB数据库的一个模块"),(0,e._)("li",null,"Mongoose 是一个对象文档模型（ODM）库，它是对Node原生的MongoDB模块进行了进一步的优化封装"),(0,e._)("li",null,"大多数情况下，他被用来把结构化的模式应用到一个MongoDB集合，并提供了验证和类型装换等好处"),(0,e._)("li",null,[(0,e.Uk)("基于MongoDB驱动，通过关系型数据库的思想来实现非关系型数据库 "),(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"在这里插入图片描述",originSrc:"https://img-blog.csdnimg.cn/2b129b0bcfe84a9aa6e021b8d606e00b.png#pic_center",data:"aurora"})])],-1),t=(0,e.uE)('<h4 id="基础概念" tabindex="-1"><a class="header-anchor" href="#基础概念" aria-hidden="true">#</a> 基础概念</h4><ol><li>Schema：模型类的骨架，通过Schema可以生成模型类，通过模型类可以生成文档。</li><li>每一个Schema对应MongoDB中的一个集合。Schema定义了集合中文档的字段格式。mongoose 出于可维护性和易用性的目的定义Schema来限定文档结构，但是MongoDB没有这个限制，也就是说MongoDB的文档无论什么结构都可以存储</li><li>Model：由Schema产生的构造器，具有属性和行为。Modal的每一个实例就是MongoDB的一个文档。</li><li>Instance：Model的实例，通过new Model()得到，也就是MongoDB的一个文档。</li><li>Mongoose是MongoDB的一个对象模型工具，也就是说Mongoose是通过操作对象模型来操作MongoDB的，而Schema是模型类的骨架，换言之，Mongoose 的一切始于 Schema。</li></ol><h3 id="new-object" tabindex="-1"><a class="header-anchor" href="#new-object" aria-hidden="true">#</a> new Object</h3><ul><li>Schema（模式对象） ——Schema 对象定义约束了数据库中的文档结构</li><li>Model ——Model 对象作为集合中的所有文档的表示，相当于MongoDB中的collection，它的每一个实例就是一个document文档</li><li>Document ——Document表示集合中的具体文档，相当于collection中的一个具体文档</li><li>关系：Schema生成Model，Model创造Document</li></ul><h4 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h4><p>前提：安装MongoDB，Nodejs</p><ol><li><p>下载安装Mongoose</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>npm i mongoose --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>项目中引入mongoose</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var mongoose = require(‘mongoose’)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>连接MongoDB数据库</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mongoose.connect(‘mongodb://数据库ip地址 : 端口号( 默认端口27017可以省略 )/数据库名’)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="数据库连接状态" tabindex="-1"><a class="header-anchor" href="#数据库连接状态" aria-hidden="true">#</a> 数据库连接状态</h5><ol><li><p>connect()返回的是一个待定状态，在mongoose中有一个属性叫 connection 用来表示数据库的连接</p></li><li><p>通过监视该对象可以用来监听数据库的连接与断开</p></li><li><p>数据库连接成功事件</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mongoose.connection.once(‘open’ , () =&gt; {})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>数据库断开事件</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mongoose.connection.once(‘close’ , () =&gt; {})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol></li><li><p>创建Schema（模式）对象</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var stuSchema = new Schema({})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol><li>通过Schema创建Model</li><li>Model 代表的是数据库中的集合，通过Model才能对数据库进行操作</li></ol></li><li><p>映射</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>var stuModel = mongoose.model(‘student’,stuSchema)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h5 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h5><ol><li>要映射的集合名</li><li>创建的约束（Schema对象）</li></ol></li><li><p>通过映射返回的值对数据库进行增、删、改、查</p></li><li><p>断开数据库连接（一般不使用）</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>mongoose.disconnect()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h3 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>\n<span class="token comment">//连接数据库</span>\nmongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/student&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">useNewUrlParser</span><span class="token operator">:</span> <span class="token boolean">true</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//监听数据库连接状态</span>\nmongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库连接成功……&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nmongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;数据库断开……&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//创建Schema对象（约束）</span>\n<span class="token keyword">var</span> stuSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>\n    <span class="token literal-property property">gender</span><span class="token operator">:</span><span class="token punctuation">{</span>\n        <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>\n        <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&#39;male&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">addr</span><span class="token operator">:</span> String\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">//将stuSchema映射到一个MongoDB collection并定义这个文档的构成</span>\n<span class="token keyword">var</span> stuModle <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;student&#39;</span><span class="token punctuation">,</span>stuSchema<span class="token punctuation">)</span>\n\n<span class="token comment">//向student数据库中插入数据</span>\nstuModle<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">addr</span><span class="token operator">:</span><span class="token string">&quot;天津&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>docs</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;插入成功&#39;</span><span class="token operator">+</span>docs<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">/*\n* 控制台结果：\n* 数据库连接成功……\n* 插入成功{\n*   gender: &#39;male&#39;,\n*   _id: 6017a189372ece49089d79c7,\n*   name: &#39;小明&#39;,\n*   age: 20,\n*  addr: &#39;天津&#39;,\n*   __v: 0\n* }\n*/</span>\n<span class="token comment">/*\n* 数据库结果：\n* | _id                      | gender | name | age  | addr | __v  |\n* | ------------------------ | ------ | ---- | ---- | ---- | ---- |\n* | 6017a189372ece49089d79c7 | male   | 小明  | 20   |  天津 | 0    |\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><h5 id="mongoose优点" tabindex="-1"><a class="header-anchor" href="#mongoose优点" aria-hidden="true">#</a> Mongoose优点</h5><ul><li>为文档创建模式结构（Schema），也可以说是约束</li><li>对模型中的对象/文档进行验证</li><li>数据可以通过类型装换装换为对象模型</li><li>可以使用中间件来应用业务逻辑挂钩</li><li>相比MongoDB驱动更容易</li></ul>',11),l={},c=(0,a(3744).Z)(l,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,p,t],64)}]])}}]);