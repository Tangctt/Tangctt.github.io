"use strict";(self.webpackChunkaurora_template=self.webpackChunkaurora_template||[]).push([[866],{8060:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-6b9f561e",path:"/Vue/Cookie-LocalStorage-SessionStorage.html",title:"Cookie、LocalStorage、SessionStorage的异同",lang:"zh-CN",frontmatter:{date:"2022/5/4 14:10",coverUrl:"/pic/7.jpg",stick:!1,keyword:"Cookie,LocalStorage,SessionStorage",description:"Cookie、LocalStorage、SessionStorage的异同",title:"Cookie、LocalStorage、SessionStorage的异同",tag:["Cookie","LocalStorage","SessionStorage"],categories:["Cookie","LocalStorage","SessionStorage"]},excerpt:"",headers:[{level:2,title:"✨Cookie、LocalStorage、SessionStorage的异同✨",slug:"✨cookie、localstorage、sessionstorage的异同✨",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"Cookie与Session的区别",slug:"cookie与session的区别",children:[]},{level:3,title:"Cookie、LocalStorage、SessionStorage的异同",slug:"cookie、localstorage、sessionstorage的异同",children:[]},{level:3,title:"LocalStorage与SessionStorage的API",slug:"localstorage与sessionstorage的api",children:[]},{level:3,title:"应用场景",slug:"应用场景",children:[]}]}],git:{updatedTime:null,contributors:[]}}},4301:(s,a,n)=>{n.r(a),n.d(a,{default:()=>c});var e=n(6252);const o=(0,e.uE)('<h2 id="✨cookie、localstorage、sessionstorage的异同✨" tabindex="-1"><a class="header-anchor" href="#✨cookie、localstorage、sessionstorage的异同✨" aria-hidden="true">#</a> ✨Cookie、LocalStorage、SessionStorage的异同✨</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><ul><li>Cookie 的大小限制为4kb左右，主要作用是保存登录信息，比如登录某个网站时候看到“记住密码”，一般都是通过在 Cookie 中存入一段辨别用户身份的数据来实现的</li><li>LocalStorage 和 sessionStorage 都是 HTML5 标准中新加入的技术，主要用来做本地存储，但是二者保存数据的生命周期不同</li><li>Session 是“会话”的意思，sessionStorage 只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在，但当页面关闭后，sessionStorage 中的数据就会被清空。而 LocalStorage 存储的数据除非被清除，否者永远存在本地</li></ul><h3 id="cookie与session的区别" tabindex="-1"><a class="header-anchor" href="#cookie与session的区别" aria-hidden="true">#</a> Cookie与Session的区别</h3><ul><li>cookie数据存放在浏览器中，session数据存放在服务器上</li><li>cookie是不安全的，别人可以分析存放在本地的cookie并进行cookie诈骗，考虑到安全性能，应尽量使用session</li><li>session会在一定时间内保存在服务器上。当访问增多时，会比较占用服务器的性能。考虑到服务性能，应尽量使用cookie</li><li>单个cookie保存的数据不能超过4k，很多浏览器都限制一个站点最多保存20个cookie</li></ul><blockquote><p>cookie和session都用来存储用户信息，cookie存放于客户端有可能被窃取，所以cookie一般用来存放不敏感的信息，比如用户设置的网站主题，敏感的信息用session存储，比如用户的登录信息</p></blockquote><h3 id="cookie、localstorage、sessionstorage的异同" tabindex="-1"><a class="header-anchor" href="#cookie、localstorage、sessionstorage的异同" aria-hidden="true">#</a> Cookie、LocalStorage、SessionStorage的异同</h3><ul><li>HTML5中提出了webStorage的概念，webStorage包括sessionStorage和localStorage，只为了保存数据，不会与服务器进行通信</li><li>cookie,localStorage,sessionStorage都是在客户端保存数据，存储数据的类型：字符串</li><li>webStorage不会随着HTTP header发送到服务器端，所以安全性相对来说比cookie高，不必担心截获</li><li>生命周期不同（见后文），localStorage要手动清除，sessionStorage在浏览器关闭后清除</li></ul>',8),t=(0,e._)("p",null,[(0,e._)("img",{src:"https://ooszy.cco.vin/img/blog-public/ljz.gif",alt:"",originSrc:"https://img-blog.csdnimg.cn/16ab8f69dfa94df28e0a796896d122f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuZ2N0dA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center",data:"aurora"})],-1),i=(0,e.uE)('<h3 id="localstorage与sessionstorage的api" tabindex="-1"><a class="header-anchor" href="#localstorage与sessionstorage的api" aria-hidden="true">#</a> LocalStorage与SessionStorage的API</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>xxxxxStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>\n<span class="token comment">// 接收一个键和值作为参数，把键值对添加到存储中</span>\n<span class="token comment">// 如果键名存在，则更新其对应的值。</span>\n\nxxxxxStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 接收一个键名作为参数，返回键名对应的值</span>\n\nxxxxxStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// 接收一个键名作为参数，并把该键名从存储中删除</span>\n\nxxxxxStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 清空存储中的所有数据</span>\n\n<span class="token comment">// 注意：只能存储字符串，不能存储对象、JSON等其他数据格式</span>\n\n<span class="token comment">// 存储对象时，需要通过JSON.stringify()将对象转化为字符串</span>\nlocalStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 取出对象时，需要通过JSON.parse()将字符串转化为对象</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ul><li>因为考虑到每个 HTTP 请求都会带着 Cookie 的信息，所以 Cookie 当然是能精简就精简，比较常用的一个应用场景就是判断用户是否登录。</li><li>针对登录过的用户，服务器端会在他登录时往 Cookie 中插入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦</li><li>Localstorage常用于长期登录，适合长期保存在本地的数据，比如用户信息</li><li>Sessionstorage常用于敏感账号一次性登陆，如关闭当前页面再次打开页面就要重新登陆</li></ul>',4),l={},c=(0,n(3744).Z)(l,[["render",function(s,a){return(0,e.wg)(),(0,e.iD)(e.HY,null,[o,t,i],64)}]])}}]);