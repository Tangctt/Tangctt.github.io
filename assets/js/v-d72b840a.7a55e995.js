"use strict";(self.webpackChunkaurora_template=self.webpackChunkaurora_template||[]).push([[867],{9810:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-d72b840a",path:"/Other/Python/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%A7%E8%A1%8Cpython%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BC%A0%E5%8F%82%E6%96%B9%E5%BC%8F.html",title:"命令行执行Python脚本的传参方式",lang:"zh-CN",frontmatter:{date:"2022/4/24 16:08",coverUrl:"/pic/9.jpg",stick:!1,keyword:"Python,命令行,传参",description:"命令行执行Python脚本的传参方式",title:"命令行执行Python脚本的传参方式",tag:["Python","命令行","传参"],categories:["Python","命令行","传参"]},excerpt:"",headers:[{level:2,title:"✨命令行执行Python脚本的传参方式✨",slug:"✨命令行执行python脚本的传参方式✨",children:[{level:3,title:"应用场景",slug:"应用场景",children:[]},{level:3,title:"方式一",slug:"方式一",children:[]},{level:3,title:"方式二",slug:"方式二",children:[]}]}],git:{updatedTime:null,contributors:[]}}},494:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h2 id="✨命令行执行python脚本的传参方式✨" tabindex="-1"><a class="header-anchor" href="#✨命令行执行python脚本的传参方式✨" aria-hidden="true">#</a> ✨命令行执行Python脚本的传参方式✨</h2><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><ul><li>在对ABAQUS进行二次开发时，需要将核心脚本的外部数据传递到脚本内部并执行</li><li>核心脚本在运行时，可以调用所传递的变量参数</li><li>命令行执行或者用户子程序执行</li></ul><h3 id="方式一" tabindex="-1"><a class="header-anchor" href="#方式一" aria-hidden="true">#</a> 方式一</h3><h4 id="使用sys-args" tabindex="-1"><a class="header-anchor" href="#使用sys-args" aria-hidden="true">#</a> 使用sys.args</h4><h4 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h4><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> sys\n\n<span class="token keyword">def</span> <span class="token function">test_sys_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;无参数输入&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    test_sys_args<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="执行" tabindex="-1"><a class="header-anchor" href="#执行" aria-hidden="true">#</a> 执行</h4><p><code>python test.py a 1 test</code></p><ul><li>脚本文件名后面的是需要传递的参数</li><li>其它参数在命令行中传入时需要用空格分开</li><li>若参数中需要包含“”，则需要使用到转义字符\\进行转义</li></ul><h4 id="输出结果" tabindex="-1"><a class="header-anchor" href="#输出结果" aria-hidden="true">#</a> 输出结果</h4><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token number">3</span>\n<span class="token punctuation">[</span><span class="token string">&#39;test.py&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>3代表着传递参数的数量</li><li>sys.args实现从程序外部向程序传递参数，它的值是一个列表list，其中保存了通过命令行传递的各个参数</li><li>输出sys.argv[0],即为第一个参数，是脚本本身</li><li>sys.argv[1]的输出结果为a</li></ul><blockquote><p>所以在二次开发的仿真脚本中，使用子程序进或命令行运行脚本，且需要使用此种方式进行传参时，需要将变量及其参数一并传递，具体使用方式如下</p></blockquote><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#执行脚本</span>\nchild_process<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span>command val1<span class="token operator">=</span><span class="token number">1</span> val2<span class="token operator">=</span><span class="token number">2</span> val3<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>脚本内部 <code>sys.argv[1]</code>输出结果为<code>val1=1</code></p><ul><li>满足脚本对的变量需求，成功将脚本外的参数传递到脚本内</li></ul><h3 id="方式二" tabindex="-1"><a class="header-anchor" href="#方式二" aria-hidden="true">#</a> 方式二</h3><h4 id="创建独立脚本参数文件" tabindex="-1"><a class="header-anchor" href="#创建独立脚本参数文件" aria-hidden="true">#</a> 创建独立脚本参数文件</h4><ul><li>使用node.js的文本操作<code>fs</code>模块</li><li>在<code>python</code>的运行目录下创建单独的变量数据<code>txt</code>文件夹</li><li>先读取变量数据，然后将变量根据格式拼接，最后将其写入单独的文本文件</li><li>在执行<code>python</code>脚本时，只需在脚本中运行目录下的文本文件，就完成了参数的传递工作</li></ul><h4 id="如下所示" tabindex="-1"><a class="header-anchor" href="#如下所示" aria-hidden="true">#</a> 如下所示</h4><h4 id="node-js后端" tabindex="-1"><a class="header-anchor" href="#node-js后端" aria-hidden="true">#</a> node.js后端</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>\n\nfs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">,</span> _registerMsg<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 变量文件创建成功后，执行核心计算脚本</span>\n            <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;abaqus cae nogui=abaqus.py&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>stdout<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 计算成功</span>\n                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;you offer args:&#39;</span><span class="token punctuation">,</span> stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token comment">// 计算失败</span>\n                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;you don\\&#39;t offer args&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&#39;stderr : &#39;</span> <span class="token operator">+</span> stderr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><blockquote><p>脚本所需参数已经提前拼接并写入到<code>_registerMsg</code>变量中</p></blockquote><h4 id="python脚本" tabindex="-1"><a class="header-anchor" href="#python脚本" aria-hidden="true">#</a> python脚本</h4><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> io\n<span class="token keyword">with</span> io<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n    code <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">exec</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>脚本只需打开同目录下的参数文件并执行，即可将参数传递到脚本中</p></blockquote><h4 id="两种方式的优缺点" tabindex="-1"><a class="header-anchor" href="#两种方式的优缺点" aria-hidden="true">#</a> 两种方式的优缺点</h4><ul><li>第一种方式能够对每个参数进行单独读取，但是也需要进行单独输出</li><li>当需要传递参数较多时，每次运行脚本都要进行输入，工作量较大</li><li>第二种方式将参数进行了集成，只需调整脚本中的变量，集合进行参数的修改</li><li>在面向较多的参数时便于对参数的操作，能够提升效率</li></ul>',29),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);