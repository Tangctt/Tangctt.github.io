"use strict";(self.webpackChunkaurora_template=self.webpackChunkaurora_template||[]).push([[276],{5997:(e,i,t)=>{t.r(i),t.d(i,{data:()=>d});const d={key:"v-13cbc288",path:"/Tools/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0Github.html",title:"项目上传Github",lang:"zh-CN",frontmatter:{date:"2022/6/12 10:08",coverUrl:"/pic/13.png",stick:!1,keyword:"Github",description:"项目上传Github",title:"项目上传Github",tag:["Github"],categories:["Github"]},excerpt:"",headers:[{level:2,title:"✨项目上传Github✨",slug:"✨项目上传github✨",children:[{level:3,title:"使用Git工具，适用于首次创建仓库",slug:"使用git工具-适用于首次创建仓库",children:[]},{level:3,title:"1. 先到Github创建仓库，复制仓库的ssh连接（推荐）",slug:"_1-先到github创建仓库-复制仓库的ssh连接-推荐",children:[]},{level:3,title:"2. 再build后的项目dist下",slug:"_2-再build后的项目dist下",children:[]},{level:3,title:"3. 将所有文件移动到新的文件夹中（名称为仓库名）",slug:"_3-将所有文件移动到新的文件夹中-名称为仓库名",children:[]},{level:3,title:"4. git add .将所有文件标记提交",slug:"_4-git-add-将所有文件标记提交",children:[]},{level:3,title:'5. git commit -m "提交信息"',slug:"_5-git-commit-m-提交信息",children:[]},{level:3,title:"6. git push -u origin master",slug:"_6-git-push-u-origin-master",children:[]},{level:3,title:"非首次上传文件（更新仓库文件）",slug:"非首次上传文件-更新仓库文件",children:[]},{level:3,title:"1. 项目只需clone一次，只要本地目录中有.git文件夹，后续可以直接上传",slug:"_1-项目只需clone一次-只要本地目录中有-git文件夹-后续可以直接上传",children:[]},{level:3,title:"2. 将新build项目的dist文件夹下的所有文件，替换到本地仓库下（有.get文件）",slug:"_2-将新build项目的dist文件夹下的所有文件-替换到本地仓库下-有-get文件",children:[]},{level:3,title:"3. git add .",slug:"_3-git-add",children:[]},{level:3,title:'4. git commit -m "信息"',slug:"_4-git-commit-m-信息",children:[]},{level:3,title:"5. git push",slug:"_5-git-push",children:[]},{level:3,title:"版本管理",slug:"版本管理",children:[]},{level:3,title:"1. git bash中git log一下查看提交历史和哈希值",slug:"_1-git-bash中git-log一下查看提交历史和哈希值",children:[]},{level:3,title:"2. git rest --hard HEAD^：回退到上一版",slug:"_2-git-rest-hard-head-回退到上一版",children:[]},{level:3,title:"3. git rest --hard HEAD^^：回退到倒数第二版",slug:"_3-git-rest-hard-head-回退到倒数第二版",children:[]},{level:3,title:"4. git rest --hard 3628164：回退到commit id为3628164的版本",slug:"_4-git-rest-hard-3628164-回退到commit-id为3628164的版本",children:[]}]}],git:{updatedTime:null,contributors:[]}}},9138:(e,i,t)=>{t.r(i),t.d(i,{default:()=>h});const d=(0,t(6252).uE)('<h2 id="✨项目上传github✨" tabindex="-1"><a class="header-anchor" href="#✨项目上传github✨" aria-hidden="true">#</a> ✨项目上传Github✨</h2><h3 id="使用git工具-适用于首次创建仓库" tabindex="-1"><a class="header-anchor" href="#使用git工具-适用于首次创建仓库" aria-hidden="true">#</a> <strong>使用Git工具，适用于首次创建仓库</strong></h3><h3 id="_1-先到github创建仓库-复制仓库的ssh连接-推荐" tabindex="-1"><a class="header-anchor" href="#_1-先到github创建仓库-复制仓库的ssh连接-推荐" aria-hidden="true">#</a> 1. 先到<code>Github</code>创建仓库，复制仓库的<code>ssh</code>连接（推荐）</h3><p>（也可以在本地<code>git init</code>后再<code>git remote add origin</code> + 仓库地址）</p><h3 id="_2-再build后的项目dist下" tabindex="-1"><a class="header-anchor" href="#_2-再build后的项目dist下" aria-hidden="true">#</a> 2. 再<code>build</code>后的项目<code>dist</code>下</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone + <span class="token function">ssh</span>\n<span class="token comment"># 会自动创建与仓库名相同的文件夹</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-将所有文件移动到新的文件夹中-名称为仓库名" tabindex="-1"><a class="header-anchor" href="#_3-将所有文件移动到新的文件夹中-名称为仓库名" aria-hidden="true">#</a> 3. 将所有文件移动到新的文件夹中（名称为仓库名）</h3><h3 id="_4-git-add-将所有文件标记提交" tabindex="-1"><a class="header-anchor" href="#_4-git-add-将所有文件标记提交" aria-hidden="true">#</a> 4. <code>git add .</code>将所有文件标记提交</h3><h3 id="_5-git-commit-m-提交信息" tabindex="-1"><a class="header-anchor" href="#_5-git-commit-m-提交信息" aria-hidden="true">#</a> 5. <code>git commit -m &quot;提交信息&quot;</code></h3><h3 id="_6-git-push-u-origin-master" tabindex="-1"><a class="header-anchor" href="#_6-git-push-u-origin-master" aria-hidden="true">#</a> 6. <code>git push -u origin master</code></h3><p>（在第一次git push加了-u后，再次git pull或者push就不需要加两个主机名了）</p><h3 id="非首次上传文件-更新仓库文件" tabindex="-1"><a class="header-anchor" href="#非首次上传文件-更新仓库文件" aria-hidden="true">#</a> <strong>非首次上传文件（更新仓库文件）</strong></h3><h3 id="_1-项目只需clone一次-只要本地目录中有-git文件夹-后续可以直接上传" tabindex="-1"><a class="header-anchor" href="#_1-项目只需clone一次-只要本地目录中有-git文件夹-后续可以直接上传" aria-hidden="true">#</a> 1. 项目只需<code>clone</code>一次，只要本地目录中有<code>.git</code>文件夹，后续可以直接上传</h3><h3 id="_2-将新build项目的dist文件夹下的所有文件-替换到本地仓库下-有-get文件" tabindex="-1"><a class="header-anchor" href="#_2-将新build项目的dist文件夹下的所有文件-替换到本地仓库下-有-get文件" aria-hidden="true">#</a> 2. 将新<code>build</code>项目的<code>dist</code>文件夹下的所有文件，替换到本地仓库下（有<code>.get</code>文件）</h3><h3 id="_3-git-add" tabindex="-1"><a class="header-anchor" href="#_3-git-add" aria-hidden="true">#</a> 3. <code>git add .</code></h3><h3 id="_4-git-commit-m-信息" tabindex="-1"><a class="header-anchor" href="#_4-git-commit-m-信息" aria-hidden="true">#</a> 4. <code>git commit -m &quot;信息&quot;</code></h3><h3 id="_5-git-push" tabindex="-1"><a class="header-anchor" href="#_5-git-push" aria-hidden="true">#</a> 5. <code>git push</code></h3><h3 id="版本管理" tabindex="-1"><a class="header-anchor" href="#版本管理" aria-hidden="true">#</a> <strong>版本管理</strong></h3><h3 id="_1-git-bash中git-log一下查看提交历史和哈希值" tabindex="-1"><a class="header-anchor" href="#_1-git-bash中git-log一下查看提交历史和哈希值" aria-hidden="true">#</a> 1. <code>git bash</code>中<code>git log</code>一下查看提交历史和哈希值</h3><h3 id="_2-git-rest-hard-head-回退到上一版" tabindex="-1"><a class="header-anchor" href="#_2-git-rest-hard-head-回退到上一版" aria-hidden="true">#</a> 2. <code>git rest --hard HEAD^</code>：回退到上一版</h3><h3 id="_3-git-rest-hard-head-回退到倒数第二版" tabindex="-1"><a class="header-anchor" href="#_3-git-rest-hard-head-回退到倒数第二版" aria-hidden="true">#</a> 3. <code>git rest --hard HEAD^^</code>：回退到倒数第二版</h3><h3 id="_4-git-rest-hard-3628164-回退到commit-id为3628164的版本" tabindex="-1"><a class="header-anchor" href="#_4-git-rest-hard-3628164-回退到commit-id为3628164的版本" aria-hidden="true">#</a> 4. <code>git rest --hard 3628164</code>：回退到commit id为3628164的版本</h3>',22),a={},h=(0,t(3744).Z)(a,[["render",function(e,i){return d}]])}}]);