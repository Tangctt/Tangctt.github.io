"use strict";(self.webpackChunkblog_demo=self.webpackChunkblog_demo||[]).push([[233],{418:(e,n,s)=>{s.r(n),s.d(n,{data:()=>a});const a={key:"v-9151a0e2",path:"/Interview/vue/vue(1).html",title:"Vue面经（1）",lang:"zh-CN",frontmatter:{date:"2022/3/1 22:30",coverUrl:"/pic/6.jpg",stick:!1,keyword:"Vue,Interview",description:"Vue面经（1）",title:"Vue面经（1）",tag:["Vue","Interview"],categories:["Vue","Interview"]},excerpt:"",headers:[{level:2,title:"✨Vue面经（1）✨",slug:"✨vue面经-1-✨",children:[{level:3,title:"1. v-show和v-if区别",slug:"_1-v-show和v-if区别",children:[]},{level:3,title:"2. 为何v-for要用key",slug:"_2-为何v-for要用key",children:[]},{level:3,title:"3. 描述vue组件声明周期",slug:"_3-描述vue组件声明周期",children:[]},{level:3,title:"4. vue组件如何通信",slug:"_4-vue组件如何通信",children:[]},{level:3,title:"5. 描述组件渲染和更新的过程",slug:"_5-描述组件渲染和更新的过程",children:[]}]}],git:{updatedTime:null,contributors:[]}}},5151:(e,n,s)=>{s.r(n),s.d(n,{default:()=>t});const a=(0,s(6252).uE)('<h2 id="✨vue面经-1-✨" tabindex="-1"><a class="header-anchor" href="#✨vue面经-1-✨" aria-hidden="true">#</a> ✨Vue面经（1）✨</h2><h3 id="_1-v-show和v-if区别" tabindex="-1"><a class="header-anchor" href="#_1-v-show和v-if区别" aria-hidden="true">#</a> 1. <strong>v-show和v-if区别</strong></h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>v-show通过css display控制显示和隐藏，v-if组件真正的渲染和销毁，而不是显示和隐藏，频繁切换状态使用v-show 否则v-if\nv-if 常用于一次性改变，如根据权限决定是否显示\nv-show 用于 tabs 切换\nv-if 可与 templete块连用 ，v-show 不支持 &lt;template&gt; 元素，也不支持 v-else\nv-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗\nv-if 是控制元素的添加与删除，而 v-show 只是控制元素的 display 属性。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-为何v-for要用key" tabindex="-1"><a class="header-anchor" href="#_2-为何v-for要用key" aria-hidden="true">#</a> 2. <strong>为何v-for要用key</strong></h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>快速查找到节点，减少渲染次数，提升渲染性能\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_3-描述vue组件声明周期" tabindex="-1"><a class="header-anchor" href="#_3-描述vue组件声明周期" aria-hidden="true">#</a> 3. <strong>描述vue组件声明周期</strong></h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>单组件声明周期图\n挂载： beforeCreate =&gt; created =&gt; beforeMount =&gt; mounted\n更新： beforeUpdate =&gt; updated\n销毁： beforeDestroy =&gt; destroyed\n\n父子组件生命周期图\n挂载： parent beforeCreate =&gt; parent created =&gt; parent beforeMount =&gt; child beforeCreate =&gt; child created =&gt; child beforeMount =&gt; child mounted =&gt; parent mounted\n更新： parent beforeUpdate =&gt; child beforeUpdate =&gt; child updated =&gt; parent updated\n销毁： parent beforeDestroy =&gt; child beforeDestroy =&gt; child destroyed =&gt; parent destroyed\n从以上能够看出：\n挂载时，子组件是在父组件before mount后开始挂载，并且子组件先mounted，父组件随后\n更新时，子组件是在父组件before update后开始更新，子组件先于父组件更新\n销毁时，子组件是在父组件before destroy后开始销毁，并且是子组件先销毁，父组件随后。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_4-vue组件如何通信" tabindex="-1"><a class="header-anchor" href="#_4-vue组件如何通信" aria-hidden="true">#</a> 4. <strong>vue组件如何通信</strong></h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1.父子组件props和this.$emit\n2.ref 链：父组件要给子组件传值，在子组件上定义一个 ref 属性，这样通过父组件的 $refs 属性就可以获取子组件的值了，也可以进行父子，兄弟之间的传值($parent / $children与 ref类似)\n3.事件总线bus：使用一个 空的 VUE 实例作为事件总线，自定义事件event.$on   event.$off  event.$emit\n4 provide  inject组件通信\n5.vuex\n6.$attrs和$listeners 仅仅是传递数据，而不做中间处理，$attrs 里存放的是父组件中绑定的非 Props 属性，$listeners里存放的是父组件中绑定的非原生事件。\n\n常见使用场景可以分为三类：\n父子通信：\n\t父向子传递数据是通过 props，子向父是通过 events（$emit）；\n\t通过父链 / 子链也可以通信（$parent / $children）；\n\tref 也可以访问组件实例；\n\tprovide / inject API；\n\t$attrs/$listeners\n\tvuex\n兄弟通信：\n\t事件总线Bus；\n\tVuex\n跨级通信：\n\t事件总线Bus；\n\tVuex；\n\tprovide / inject API\n\t$attrs/$listeners\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="_5-描述组件渲染和更新的过程" tabindex="-1"><a class="header-anchor" href="#_5-描述组件渲染和更新的过程" aria-hidden="true">#</a> 5. <strong>描述组件渲染和更新的过程</strong></h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>1、vue 组件初次渲染过程\n解析模板为 render 函数\n触发响应式，监听 data 属性的 getter 和 setter\n执行 render 函数， 生成 vnode，patch(elem,vnode)\n2、vue 组件更新过程\n修改 data， 触发 setter （此前在getter中已被监听）\n重新执行 render 函数，生成 newVnode，patch(vnode, newVnode)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',11),r={},t=(0,s(3744).Z)(r,[["render",function(e,n){return a}]])}}]);